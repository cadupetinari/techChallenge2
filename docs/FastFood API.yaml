openapi: 3.0.0
info:
  title: 'Fast Food API'
  description: 'API para um sistema de fast food visando ação completa para gerenciamento de clientes, produtos, pedidos e pagamentos.'
  version: 1.0.0
servers:
  - url: http://localhost:8080/fastFoodApi
tags:
  - name: 'Categoria'
    description: 'Operações relacionados a categorias de produtos.'
  - name: 'Item Pedido'
    description: 'Operações relacionados a itens de pedido.'
  - name: 'Pedido'
    description: 'Operações relacionados a pedidos.'
  - name: 'Produto'
    description: 'Operações relacionados a produtos.'
  - name: 'Usuario'
    description: 'Operações relacionados a usuários.'
  - name: 'Pagamento'
    description: 'Webhook para registrar o pagamento do pedido.'
paths:
  /categorias:
    get:
      tags:
        - Categoria
      summary: Lista todas as categorias
      responses:
        '200':
          description: Lista de categorias recuperada com sucesso
    post:
      tags:
        - Categoria
      summary: Cria uma nova categoria
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria'
      responses:
        '201':
          description: Categoria criada com sucesso
  
  /categorias/{id}:
    get:
      tags:
        - Categoria
      summary: Obtém uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Categoria recuperada com sucesso
        '404':
          description: Categoria não encontrada
    put:
      tags:
        - Categoria
      summary: Atualiza uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Categoria'
      responses:
        '200':
          description: Categoria atualizada com sucesso
        '404':
          description: Categoria não encontrada
    delete:
      tags:
        - Categoria
      summary: Exclui uma categoria pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Categoria excluída com sucesso
        '404':
          description: Categoria não encontrada
  
  /itemPedido:
    get:
      tags:
        - Item Pedido
      summary: Lista todos os itens de pedido
      responses:
        '200':
          description: Lista de itens de pedido recuperada com sucesso
    post:
      tags:
        - Item Pedido
      summary: Cria um novo item de pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPedido'
      responses:
        '201':
          description: Item de pedido criado com sucesso
  
  /itemPedido/{id}:
    get:
      tags:
        - Item Pedido
      summary: Obtém itens de pedido por ID do pedido
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Lista de itens de pedido recuperada com sucesso
        '404':
          description: Pedido não encontrado
    put:
      tags:
        - Item Pedido
      summary: Atualiza um item de pedido
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemPedido'
      responses:
        '200':
          description: Item de pedido atualizado com sucesso
        '404':
          description: Item de pedido não encontrado
    delete:
      tags:
        - Item Pedido
      summary: Exclui um item de pedido
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Item de pedido excluído com sucesso
        '404':
          description: Item de pedido não encontrado
  
  /pedido:
    get:
      tags:
        - Pedido
      summary: Lista todos os pedidos
      responses:
        '200':
          description: Lista de pedidos recuperada com sucesso
    post:
      tags:
        - Pedido
      summary: Cria um novo pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pedido'
      responses:
        '201':
          description: Pedido criado com sucesso
  
  /pedido/{id}:
    get:
      tags:
        - Pedido
      summary: Obtém um pedido pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Pedido recuperado com sucesso
        '404':
          description: Pedido não encontrado
    put:
      tags:
        - Pedido
      summary: Atualiza um pedido pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pedido'
      responses:
        '200':
          description: Pedido atualizado com sucesso
        '404':
          description: Pedido não encontrado
    delete:
      tags:
        - Pedido
      summary: Exclui um pedido pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Pedido excluído com sucesso
        '404':
          description: Pedido não encontrado
  
  /pedido/checkout:
    post:
      tags:
        - Pedido
      summary: Realiza o checkout do pedido
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ItemPedido'
      responses:
        '201':
          description: Pedido criado com sucesso
  
  /pedido/pagamento/{id}:
    get:
      tags:
        - Pedido
      summary: Consulta o status do pagamento do pedido pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Status do pagamento recuperado com sucesso
        '404':
          description: Pedido não encontrado
    put:
      tags:
        - Pedido
      summary: Atualiza o status do pagamento do pedido pelo ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
        - in: query
          name: novoStatus
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Status do pagamento atualizado com sucesso
        '404':
          description: Pedido não encontrado
          
  /produto:
    get:
      tags:
        - Produto
      summary: Lista todos os produtos
      operationId: listarProdutos
      responses:
        '200':
          description: Lista de produtos recuperada com sucesso
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Produto'
    post:
      tags:
        - Produto
      summary: Cria um novo produto
      operationId: criarProduto
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Produto'
      responses:
        '201':
          description: Produto criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
  
  /produto/{id}:
    get:
      tags:
        - Produto
      summary: Obtém um produto pelo ID
      operationId: obterProdutoPorId
      parameters:
        - in: path
          name: id
          required: true
          description: ID do produto a ser obtido
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Produto encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
        '404':
          description: Produto não encontrado
    put:
      tags:
        - Produto
      summary: Atualiza um produto existente
      operationId: atualizarProduto
      parameters:
        - in: path
          name: id
          required: true
          description: ID do produto a ser atualizado
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Produto'
      responses:
        '200':
          description: Produto atualizado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Produto'
        '404':
          description: Produto não encontrado
    delete:
      tags:
        - Produto
      summary: Remove um produto existente
      operationId: removerProduto
      parameters:
        - in: path
          name: id
          required: true
          description: ID do produto a ser removido
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Produto removido com sucesso
        '404':
          description: Produto não encontrado
          
  /usuario/{cpf}:
    get:
      tags:
        - Usuario
      summary: Valida se consumidor já está cadastrado na base.
      operationId: buscarClienteCPF
      parameters:
        - in: path
          name: cpf
          required: true
          description: CPF do usuário a ser validado
          schema:
            type: string
      responses:
        '200':
          description: Usuário encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'
        '404':
          description: Usuário não encontrado
    
  /usuario:
    post:
      tags:
        - Usuario
      summary: Realiza o cadastro de um novo consumidor.
      operationId: criarUsuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: Usuário criado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Usuario'

  /webhook/pagamento:
    post:
      tags:
        - Pagamento
      summary: Recebe a confirmação de pagamento e atualiza o status do pedido.
      operationId: receberConfirmacaoPagamento
      parameters:
        - in: query
          name: idPedido
          required: true
          description: ID do pedido que teve o pagamento confirmado
          schema:
            type: integer
        - in: query
          name: statusPagamento
          required: true
          description: Novo status do pagamento ('aprovado', 'recusado', etc.)
          schema:
            type: string
      responses:
        '200':
          description: Status de pagamento atualizado com sucesso.
        '400':
          description: Status de pagamento desconhecido ou outros erros.

components:
  schemas:
    Categoria:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID da categoria
        categoria:
          type: string
          description: Nome da categoria
      example:
        id: 1
        categoria: Hambúrgueres
        
    ItemPedido:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do item de pedido
        idPedido:
          type: integer
          format: int64
          description: ID do pedido associado
        idProduto:
          type: integer
          format: int64
          description: ID do produto associado
        quantidade:
          type: integer
          description: Quantidade do produto
      example:
        id: 1
        idPedido: 123
        idProduto: 456
        quantidade: 2
        
    Pedido:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do pedido
        cpf:
          type: string
          description: CPF do cliente
        valorTotal:
          type: number
          description: Valor total do pedido
        ordemFila:
          type: integer
          description: Ordem na fila de pedidos
        dataCriacao:
          type: string
          format: date-time
          description: Data de criação do pedido
        status:
          type: string
          description: Status do pedido
        statusPagamento:
          type: string
          description: Status do pagamento do pedido
      example:
        id: 1
        cpf: "12345678900"
        valorTotal: 30.50
        ordemFila: 1
        dataCriacao: "2024-03-10T10:30:00"
        status: "Em preparo"
        statusPagamento: "Pago"
        
    Produto:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: ID do produto
        nome:
          type: string
          description: Nome do produto
        preco:
          type: number
          description: Preço do produto
        categoria:
          $ref: '#/components/schemas/Categoria'
      example:
        id: 1
        nome: "Hambúrguer"
        preco: 15.00
        categoria:
          id: 1
          categoria: "Hambúrgueres"
          
    Usuario:
      type: object
      properties:
        cpf:
          type: string
          description: CPF do usuário
        nome:
          type: string
          description: Nome do usuário
        email:
          type: string
          description: E-mail do usuário
        endereco:
          type: string
          description: Endereço do usuário
      example:
        cpf: "12345678900"
        nome: "João da Silva"
        email: "joao@example.com"
        endereco: "Rua das Flores, 123"